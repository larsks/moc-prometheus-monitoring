---
version: "3"

volumes:
  prometheus_data_main:
  prometheus_run:
  traefik_data:
  vmetrics_data:

  # We mark the grafana_data volume as "external" so that it
  # doesn't get deleted when we run "docker-compose down -v"
  # (note that this means you must creat the volume before
  # bringing up the compose stack).
  grafana_data:
    external: true

services:

  # The Traefik frontend proxy is responsible for routing requests
  # to backend containers based on rules registered via container
  # labels. In this configuration, we rely on the request hostname to
  # select the appropriate backend.
  frontend:
    image: traefik:v2.2
    command: >-
      --configfile /etc/traefik/traefik.yml
    ports:
      - "443:443"
      - "80:80"
      - "127.0.0.1:8080:8080"
    volumes:
      - "./data/traefik:/etc/traefik"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "traefik_data:/data/traefik"

  # The main Prometheus instance. This runs all the scrape jobs and writes
  # metrics to local storage and any remote write destinations.
  prom_main:
    image: prom/prometheus
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - "prometheus_data_main:/prometheus"
      - "prometheus_run:/run/prometheus"
      - "./data/prom_main/prometheus.yml:/etc/prometheus/prometheus.yml"
    restart: always
    command: >-
      --config.file=/etc/prometheus/prometheus.yml
      --storage.tsdb.path=/prometheus
      --web.console.libraries=/usr/share/prometheus/console_libraries
      --web.console.templates=/usr/share/prometheus/consoles
      --storage.tsdb.min-block-duration=2h
      --storage.tsdb.max-block-duration=2h
    labels:
      - traefik.enable=true
      - traefik.http.routers.prom_main.rule=Host(`prom.promtest.massopen.cloud`)
      - traefik.http.services.prom_main.loadbalancer.server.port=9090
      - traefik.tls=true
      - traefik.http.routers.prom_main.tls.certresolver=letsEncrypt
      - traefik.http.routers.prom_main.middlewares=moc_auth@file


  # Discover the address of the Docker host and make it available
  # to Prometheus via file-based service discovery.
  prom_host_discovery:
    build:
      context: build/ansible
    volumes:
      - "prometheus_run:/run/prometheus"
      - "./data/ansible:/data/ansible"
    command: ansible-playbook /data/ansible/discover-host.yml

  # Hey look it's Grafana.
  grafana:
    image: grafana/grafana
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - "grafana_data:/var/lib/grafana"
      - "./data/grafana/provisioning:/etc/grafana/provisioning"
    restart: always
    labels:
      - traefik.enable=true
      - traefik.tls=true
      - traefik.http.routers.grafana.rule=Host(`grafana.promtest.massopen.cloud`)
      - traefik.http.services.grafana.loadbalancer.server.port=3000
      - traefik.http.routers.grafana.tls.certresolver=letsEncrypt

  # Regularly backup Grafana database
  grafana_backup:
    build:
      context: build/cron
    volumes:
      - "grafana_data:/var/lib/grafana"
      - "./data/grafana/periodic/hourly:/etc/periodic/hourly"
      - "./data/grafana/periodic/daily:/etc/periodic/daily"
      - "./data/grafana/backup-file.sh:/etc/scripts/backup-file.sh"
    restart: always

  # Exports data about Cinder volumes.
  cinder_exporter:
    image: larsks/cinder-exporter
    volumes:
      - ./openstack:/etc/openstack
    command: -v --os-cloud ${OS_CLOUD}
    restart: always

  # Exports data about Keystone domains, projects, and users.
  keystone_exporter:
    image: larsks/keystone-exporter
    volumes:
      - ./openstack:/etc/openstack
    command: -v --os-cloud ${OS_CLOUD}
    restart: always

  # Exports data about hypervisors.
  nova_exporter:
    image: larsks/nova-exporter
    volumes:
      - ./openstack:/etc/openstack
    command: -v --os-cloud ${OS_CLOUD}
    restart: always

  # The sidecar ships data from the local Prometheus store to an object
  # storage service and also provides the query server with access to the
  # local data.
  thanos_sidecar:
    image: thanosio/thanos
    volumes:
      - prometheus_data_main:/prometheus
      - ./thanos:/etc/thanos
    command: >-
      sidecar
      --prometheus.url http://prom_main:9090
      --tsdb.path /prometheus
      --objstore.config-file /etc/thanos/bucket_config.yml
      --http-address 0.0.0.0:19191
      --grpc-address 0.0.0.0:19090
    restart: always

  # The Thanos store gateway provides the query server with access to
  # data in the object store.
  thanos_store:
    image: thanosio/thanos
    volumes:
      - ./thanos:/etc/thanos
    command: >-
      store
      --data-dir /var/thanos/cache
      --objstore.config-file /etc/thanos/bucket_config.yml
      --http-address 0.0.0.0:19191
      --grpc-address 0.0.0.0:19090
    restart: always

  # The query server provides a Prometheus-compatible query API that
  # aggregates data from multiple sources (specifically, the
  # thanos_sidecar and thanos_store containers).
  thanos_query:
    image: thanosio/thanos
    command: >-
      query
      --http-address 0.0.0.0:19192
      --store thanos_sidecar:19090
      --store thanos_store:19090
    ports:
      - "127.0.0.1:19192:19192"
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.thanos_query.rule=Host(`thanos.promtest.massopen.cloud`)
      - traefik.http.services.thanos_query.loadbalancer.server.port=19192
      - traefik.tls=true
      - traefik.http.routers.thanos_query.tls.certresolver=letsEncrypt
      - traefik.http.routers.thanos_query.middlewares=moc_auth@file

  # Downsamples data in the object store to provide better performance
  # when querying data in the past.
  thanos_compactor:
    image: thanosio/thanos
    volumes:
      - ./thanos:/etc/thanos
    command: >-
      compact
      --data-dir /var/thanos/compact
      --objstore.config-file /etc/thanos/bucket_config.yml
      --http-address 0.0.0.0:19191
      -w
    restart: always

  vmetrics:
    image: victoriametrics/victoria-metrics
    volumes:
      - vmetrics_data:/data/vmetrics
    command: >-
      -storageDataPath /data/vmetrics
      -retentionPeriod 6
    restart: always
