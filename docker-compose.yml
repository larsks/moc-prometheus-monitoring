---
version: "3"

volumes:
  postgres_data:
  prometheus_data_main:
  prometheus_data_archive:
  prometheus_run:
  grafana_data:
    external: true

services:

  # This is a Postgres database running TimescaleDB
  # extensions. It is used as a remote write destination
  # by the prom_main container.
  postgres:
    image: timescale/pg_prometheus:latest-pg11
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - "postgres_data:/var/lib/postgresql/data"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1s
      timeout: 5s
      retries: 10
    restart: always


  # This is the Postgres adapter from TimescaleDB. It accepts
  # data from Prometheus and writes it to the Postgres database.
  prom_pg_adapter:
    image: timescale/prometheus-postgresql-adapter:latest
    command: >-
      -pg-host=postgres -pg-password=${POSTGRES_PASSWORD} -log-level warn
    restart: always

  # Export Postgres metrics for consumption by Prometheus.
  postgres_exporter:
    image: wrouesnel/postgres_exporter
    environment:
      DATA_SOURCE_URI: "postgres?sslmode=disable"
      DATA_SOURCE_USER: "postgres"
      DATA_SOURCE_PASS: "${POSTGRES_PASSWORD}"
      DATA_SOURCE_WEB_LISTEN_ADDRESS: ":9187"
      PG_EXPORTER_AUTO_DISCOVER_DATABASES: "true"
      PG_EXPORTER_EXCLUDE_DATABASES: "template0,template1"

  # The main Prometheus instance. This runs all the scrape jobs and writes
  # metrics to local storage and any remote write destinations.
  prom_main:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - "prometheus_data_main:/prometheus"
      - "prometheus_run:/run/prometheus"
      - "./data/prom_main/prometheus.yml:/etc/prometheus/prometheus.yml"
    restart: always
    command: >-
      --config.file=/etc/prometheus/prometheus.yml
      --storage.tsdb.path=/prometheus
      --web.console.libraries=/usr/share/prometheus/console_libraries
      --web.console.templates=/usr/share/prometheus/consoles
      --storage.tsdb.min-block-duration=2h
      --storage.tsdb.max-block-duration=2h

  # Discover the address of the Docker host and make it available
  # to Prometheus via file-based service discovery.
  prom_host_discovery:
    build:
      context: build/ansible
    volumes:
      - "prometheus_run:/run/prometheus"
      - "./data/ansible:/data/ansible"
    command: ansible-playbook /data/ansible/discover-host.yml

  # This is a read-only Prometheus instance that is configured to
  # use postgres as a remote read source.
  prom_archive:
    image: prom/prometheus
    ports:
      - "9191:9090"
    volumes:
      - "prometheus_data_archive:/prometheus"
      - "./data/prom_archive/prometheus.yml:/etc/prometheus/prometheus.yml"
    restart: always

  # Hey look it's Grafana.
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - "grafana_data:/var/lib/grafana"
      - "./data/grafana/provisioning:/etc/grafana/provisioning"
    restart: always

  # Exports data about Cinder volumes.
  cinder_exporter:
    image: larsks/cinder-exporter
    volumes:
      - ./openstack:/etc/openstack
    command: -v --os-cloud ${OS_CLOUD}
    restart: always

  # Exports data about Keystone domains, projects, and users.
  keystone_exporter:
    image: larsks/keystone-exporter
    volumes:
      - ./openstack:/etc/openstack
    command: -v --os-cloud ${OS_CLOUD}
    restart: always

  # Exports data about hypervisors.
  nova_exporter:
    image: larsks/nova-exporter
    volumes:
      - ./openstack:/etc/openstack
    command: -v --os-cloud ${OS_CLOUD}
    restart: always

  # The sidecar ships data from the local Prometheus store to an object
  # storage service and also provides the query server with access to the
  # local data.
  thanos_sidecar:
    image: thanosio/thanos
    volumes:
      - prometheus_data_main:/prometheus
      - ./thanos:/etc/thanos
    command: >-
      sidecar
      --prometheus.url http://prom_main:9090
      --tsdb.path /prometheus
      --objstore.config-file /etc/thanos/bucket_config.yml
      --http-address 0.0.0.0:19191
      --grpc-address 0.0.0.0:19090
    restart: always

  # The Thanos store gateway provides the query server with access to
  # data in the object store.
  thanos_store:
    image: thanosio/thanos
    volumes:
      - ./thanos:/etc/thanos
    command: >-
      store
      --data-dir /var/thanos/cache
      --objstore.config-file /etc/thanos/bucket_config.yml
      --http-address 0.0.0.0:19191
      --grpc-address 0.0.0.0:19090
    restart: always

  # The query server provides a Prometheus-compatible query API that
  # aggregates data from multiple sources (specifically, the
  # thanos_sidecar and thanos_store containers).
  thanos_query:
    image: thanosio/thanos
    command: >-
      query
      --http-address 0.0.0.0:19192
      --store thanos_sidecar:19090
      --store thanos_store:19090
    ports:
      - 19192:19192
    restart: always

  # Downsamples data in the object store to provide better performance
  # when querying data in the past.
  thanos_compactor:
    image: thanosio/thanos
    volumes:
      - ./thanos:/etc/thanos
    command: >-
      compact
      --data-dir /var/thanos/compact
      --objstore.config-file /etc/thanos/bucket_config.yml
      --http-address 0.0.0.0:19191
      -w
    restart: always
